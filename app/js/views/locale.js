// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['text!templates/locale.html', 'collections/locales'], function(template, LocaleCollection) {
    var LocaleView, _ref;
    return LocaleView = (function(_super) {
      __extends(LocaleView, _super);

      function LocaleView() {
        _ref = LocaleView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      LocaleView.prototype.el = "#locale-container";

      LocaleView.prototype.template = _.template(template);

      LocaleView.prototype.events = {
        "click": "change"
      };

      LocaleView.prototype.initialize = function(app) {
        this.app = app;
        this.collection = new LocaleCollection(app.locales);
        return this.render;
      };

      LocaleView.prototype.render = function() {
        var that;
        that = this;
        return _.each(this.collection.models, function(locale) {
          return that.$el.append(that.template(locale));
        });
      };

      LocaleView.prototype.change = function(event) {
        var id;
        id = $(event.target).attr("id");
        this.clear();
        this.setLocale(id);
        $(event.target).addClass("circle").addClass("text-danger");
        return this.app.resume.render();
      };

      LocaleView.prototype.clear = function() {
        var el, locale;
        locale = this.collection.findWhere({
          active: true
        });
        if (locale !== void 0) {
          locale.set({
            active: false
          });
        }
        el = this.$el.find("#" + locale.toJSON().link);
        return el.removeClass("circle").removeClass("text-danger");
      };

      LocaleView.prototype.setLocale = function(id) {
        var model;
        model = this.collection.findWhere({
          link: id
        });
        if (model !== void 0) {
          model.set({
            active: true
          });
        }
        return this.locale = model;
      };

      return LocaleView;

    })(Backbone.View);
  });

}).call(this);
